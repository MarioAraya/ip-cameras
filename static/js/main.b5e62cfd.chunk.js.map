{"version":3,"sources":["components/LoginForm.js","components/VideoPlayer.js","components/AppCamaras.js","App.js","serviceWorker.js","index.js"],"names":["validate","email","password","length","LoginForm","props","_useState","useState","_useState2","Object","slicedToArray","setEmail","_useState3","_useState4","setPassword","_useState5","_useState6","touched","setTouched","handleBlur","field","evt","objectSpread","defineProperty","canBeSubmitted","errors","keys","some","x","isDisabled","shouldMarkError","hasError","shouldShow","react_default","a","createElement","onSubmit","preventDefault","className","type","placeholder","value","onChange","ev","target","onBlur","disabled","onClick","urlCam1","window","Configs","urlCam2","onclick","VideoPlayer","innerWidth","videoWidth","setVideoWidth","cameraUrl","useEffect","handleResize","addEventListener","removeEventListener","onback","id","width","key","controls","muted","autoPlay","src","styles","slide","padding","minHeight","color","slide1","slide2","AppCamaras","setCameraUrl","index","setIndex","lib_default","onChangeIndex","style","assign","components_LoginForm","url","slide3","components_VideoPlayer","App","components_AppCamaras","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5e62cfd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction validate(email, password) {\n    return {\n        email: email.length === 0, //true if email is empty\n        password: password.length === 0, //true if password is empty\n    };\n}\n\nfunction LoginForm(props) {\n    const [email, setEmail]  = useState('mario@gmail.com')\n    const [password, setPassword]  = useState('')\n    const [touched, setTouched]  = useState(false)\n\n    const handleBlur = (field) => (evt) => {\n        setTouched({ ...touched, [field]: true })\n    }\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        if (!canBeSubmitted()) {        \n            return;\n        }\n    }\n\n    const getUserCamUrl = () => {\n        var urlCam1 = window.Configs.urlCam1;\n        var urlCam2 = window.Configs.urlCam2;\n        switch (email) {\n            case 'mario@gmail.com' : \n                props.onclick(urlCam1)\n                break;\n            case 'araya@gmail.com' : \n                props.onclick(urlCam2)\n                break;\n            default : \n                return;\n        }\n    }\n\n    const canBeSubmitted = () => {\n        const errors = validate(email, password);\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\n        return !isDisabled;\n    }\n\n    const errors = validate(email, password);\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\n\n    const shouldMarkError = (field) => {\n        const hasError = errors[field];\n        const shouldShow = touched[field];\n        return hasError ? shouldShow : false;\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                className={shouldMarkError('email') ? \"error\" : \"\"}\n                type=\"text\"\n                placeholder=\"Ingrese email\"\n                value={email}\n                onChange={ev => setEmail(ev.target.value)}\n                onBlur={handleBlur('email')}\n            />\n            <span className={shouldMarkError('email') ? \"error\" : \"hidden\"}\n            >email incorrecto</span>\n\n\n            <input\n                className={shouldMarkError('password') ? \"error\" : \"\"}\n                type=\"password\"\n                placeholder=\"Ingrese contraseña\"\n                value={password}\n                onChange={ev => setPassword(ev.target.value)}\n                onBlur={handleBlur('password')}\n            />\n            <span className={shouldMarkError('password') ? \"error\" : \"hidden\"}\n            >Contraseña incorrecta</span>\n\n            <button disabled={isDisabled} onClick={getUserCamUrl}>Ver Cámara</button>\n        </form>\n    )\n}\n\nexport default LoginForm","import React, {useState, useEffect} from 'react';\n\nfunction VideoPlayer(props) {\n  const [videoWidth, setVideoWidth] = useState(window.innerWidth - 50) \n  const cameraUrl = props.cameraUrl;\n\n  useEffect(() => {\n    const handleResize = () => setVideoWidth(window.innerWidth);\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  if (!cameraUrl || cameraUrl === \"\") {\n    return <div></div>\n  }  \n\n  return (\n    <div>\n        <div>\n        <button className=\"btnVolver\" onClick={props.onback}>Salir</button>\n        </div>\n        <video id=\"videoPlayer\" width={videoWidth} key={cameraUrl} controls muted=\"muted\" autoPlay>\n            <source src={cameraUrl} type=\"video/mp4\" />\n        </video>\n    </div>\n  );\n}\n\nexport default VideoPlayer;","import React, { useState } from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport LoginForm from './LoginForm'\nimport VideoPlayer from './VideoPlayer';\n\nconst styles = {\n  slide: {\n    padding: 15,\n    minHeight: 100,\n    color: '#fff',\n  },\n  slide1: {\n    minHeight:'100vh',\n  },\n  slide2: {\n    minHeight:'100vh',\n  },\n};\n\nfunction AppCamaras() {\n  const [cameraUrl, setCameraUrl] = useState('');\n  const [index, setIndex] = useState(0);\n\n  function setCamera(urlCam1) {\n    setIndex(1);\n    setCameraUrl(urlCam1)\n  }\n  function onBtnVolverClk() {\n    setIndex(0);\n    setCameraUrl('')\n  }\n\n  return (\n    <SwipeableViews disabled={true} index={index} onChangeIndex={() => setIndex}> \n      <div style={Object.assign({}, styles.slide, styles.slide1)}>\n        <h1>Iniciar sesión</h1>\n        <LoginForm onclick={(url) => setCamera(url)} />\n      </div>\n      <div style={Object.assign({}, styles.slide, styles.slide3)}>\n        <VideoPlayer cameraUrl={cameraUrl} onback={() => onBtnVolverClk()}/>\n      </div>\n    </SwipeableViews>\n  );\n}\n\nexport default AppCamaras;","import React from 'react';\nimport './App.css';\nimport AppCamaras from './components/AppCamaras';\n\nfunction App() {\n  return (\n    <AppCamaras />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}